version: '2.1'

volumes:
    vgo-cache:

networks:
    net:
        ipam:
            driver: default
            config: 
                - subnet: 172.18.0.1/16

services: 
    # tracker_facade:
    # tracker_enricher:
    # tracker_payloads_keeper:
    # zk:
    #     # image: zookeeper:3.4.9
    #     image: confluentinc/cp-zookeeper:latest
    #     hostname: zookeeper
    #     environment:
    #         ZOO_MY_ID: 1
    #         ZOO_PORT: 2128
    #         ZOO_SERVICES: server.1=zk.2888:3888
    #         ZOO_LOG4J_PROP: WARN
    #         ZOOKEEPER_CLIENT_PORT: 2181
    #         ZOOKEEPER_TICK_TIME: 2000
    #     # networks: 
    #     #     net:
    #     #         ipv4_address: 172.18.0.2
    #     # logging:
    #     #     driver: none

    # kafka:
    #     image: confluentinc/cp-kafka:5.3.1
    #     hostname: kafka
    #     ports:
    #         - "9092:9092"
    #     healthcheck:
    #         test: "nc -z localhost 9092"
    #         interval: 1s
    #         retries: 60
    #     environment:
    #         KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://kafka:9092
    #         KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
    #         KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
    #         KAFKA_ZOOKEEPER_CONNECT: "zk:2181"
    #         KAFKA_BROKER_ID: 1
    #         KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    #     # networks: 
    #     #     net:
    #     #         ipv4_address: 172.28.1.8
    #     # logging:
    #     #     driver: none
    #     depends_on: 
    #         - zk

    # redis:
    #     image: redis:5.0.6
    #     ports:
    #         - "6379:6379"
    #     # networks: 
    #     #     net:
    #     #         ipv4_address: 172.18.0.2
    #     healthcheck:
    #         test: ["CMD-SHELL", "redis-cli ping"]
    #         interval: 3s
    #         timeout: 5s
    #         retries: 5

    # redis-sentinel:
    #     image: bitnami/redis-sentinel:5.0.6
    #     ports:
    #         - "26379:26379"
    #     environment:
    #         - REDIS_MASTER_HOST=redis
    #         - REDIS_MASTER_SET=mymaster
    #         - REDIS_SENTINEL_QUORUM=1
    #         - ALLOW_EMPTY_PASSWORD=yes
    #     depends_on:
    #         redis:
    #             condition: service_healthy
    #     # networks: 
    #     #     net:
    #     #         ipv4_address: 172.18.0.2
    #     healthcheck:
    #         test: ["CMD-SHELL", "redis-cli -p 26379 ping"]
    #         interval: 3s
    #         timeout: 5s
    #         retries: 5


    # pg:
    #     image: sameersbn/postgresql:10-2
    #     restart: on-failure
    #     ports:
    #         - "5433:5433"
    #     environment:
    #         - DEBUG=false
    #         - DB_USER=postgres
    #         - DB_PASS=postgres
    #         - DB_NAME=rust_tracker
    #         - DB_TEMPLATE=
    #         - DB_EXTENSION=
    #     # networks: 
    #     #     net:
    #     #         ipv4_address: 172.18.0.2
    #     healthcheck:
    #         test: ["CMD-SHELL", "pg_isready -U postgres"]
    #         interval: 3s
    #         timeout: 5s
    #         retries: 5
    #     volumes:
    #         - ./data/pg:/var/lib/postgresql
    
    clickhouse:
        image: yandex/clickhouse-server:20.4.4.18
        hostname: clickhouse
        volumes:
            - .:/rust_tracker
        environment:
            TEST_CH_HOST: clickhouse
            CH_KAFKA_TOPIC: rust_tracker_full
            CH_CONSUMER_GROUP: clickhouse_rust
            CH_BROKERS: kafka:9092
        # command: bash -c "
        #     bash ./entrypoint.sh &
        #     sleep 3 &&
        #     bash ./prepare_Ch_schema.sh &&
        #     sleep infinity "
        # networks: 
        #     net:
        #         ipv4_address: 172.18.0.2
        # depends_on:
        #     kafka:
        #         condition: service_healthy

# version: '2'
# services:
#   zookeeper:
#     image: confluentinc/cp-zookeeper:latest
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000

#   kafka:
#     # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
#     # An important note about accessing Kafka from clients on other machines: 
#     # -----------------------------------------------------------------------
#     #
#     # The config used here exposes port 29092 for _external_ connections to the broker
#     # i.e. those from _outside_ the docker network. This could be from the host machine
#     # running docker, or maybe further afield if you've got a more complicated setup. 
#     # If the latter is true, you will need to change the value 'localhost' in 
#     # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those 
#     # remote clients
#     #
#     # For connections _internal_ to the docker network, such as from other services
#     # and components, use kafka:9092.
#     #
#     # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
#     # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
#     #
#     image: confluentinc/cp-kafka:latest
#     depends_on:
#       - zookeeper
#     ports:
#       - 29092:29092
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1